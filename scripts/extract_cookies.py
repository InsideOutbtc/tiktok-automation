#!/usr/bin/env python3
"""
Extract YouTube cookies from browser for resilient downloading
Supports Chrome, Firefox, Safari, and Edge browsers
"""
import os
import sys
import json
import sqlite3
import platform
from pathlib import Path
from typing import List, Dict, Optional
import shutil
import tempfile

def get_chrome_cookies() -> List[Dict]:
    """Extract cookies from Chrome browser"""
    cookies = []
    
    # Find Chrome cookies database
    system = platform.system()
    if system == "Darwin":  # macOS
        cookie_path = Path.home() / "Library/Application Support/Google/Chrome/Default/Cookies"
    elif system == "Windows":
        cookie_path = Path.home() / "AppData/Local/Google/Chrome/User Data/Default/Cookies"
    else:  # Linux
        cookie_path = Path.home() / ".config/google-chrome/Default/Cookies"
    
    if not cookie_path.exists():
        print(f"Chrome cookies not found at {cookie_path}")
        return cookies
    
    # Copy database to temp location (Chrome locks the original)
    temp_db = tempfile.mktemp(suffix=".db")
    shutil.copy2(cookie_path, temp_db)
    
    try:
        conn = sqlite3.connect(temp_db)
        cursor = conn.cursor()
        
        # Query for YouTube cookies
        cursor.execute("""
            SELECT host_key, name, value, path, expires_utc, is_secure
            FROM cookies 
            WHERE host_key LIKE '%youtube.com' OR host_key LIKE '%google.com'
        """)
        
        for row in cursor.fetchall():
            cookies.append({
                'domain': row[0],
                'name': row[1],
                'value': row[2],
                'path': row[3],
                'expires': row[4],
                'secure': bool(row[5])
            })
        
        conn.close()
        os.unlink(temp_db)
        
    except Exception as e:
        print(f"Error reading Chrome cookies: {e}")
        if os.path.exists(temp_db):
            os.unlink(temp_db)
    
    return cookies

def get_firefox_cookies() -> List[Dict]:
    """Extract cookies from Firefox browser"""
    cookies = []
    
    # Find Firefox profile
    system = platform.system()
    if system == "Darwin":  # macOS
        profile_dir = Path.home() / "Library/Application Support/Firefox/Profiles"
    elif system == "Windows":
        profile_dir = Path.home() / "AppData/Roaming/Mozilla/Firefox/Profiles"
    else:  # Linux
        profile_dir = Path.home() / ".mozilla/firefox"
    
    if not profile_dir.exists():
        print(f"Firefox profile directory not found at {profile_dir}")
        return cookies
    
    # Find default profile
    for profile in profile_dir.glob("*.default*"):
        cookie_path = profile / "cookies.sqlite"
        if cookie_path.exists():
            try:
                conn = sqlite3.connect(str(cookie_path))
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT host, name, value, path, expiry, isSecure
                    FROM moz_cookies 
                    WHERE host LIKE '%youtube.com' OR host LIKE '%google.com'
                """)
                
                for row in cursor.fetchall():
                    cookies.append({
                        'domain': row[0],
                        'name': row[1],
                        'value': row[2],
                        'path': row[3],
                        'expires': row[4],
                        'secure': bool(row[5])
                    })
                
                conn.close()
                break
                
            except Exception as e:
                print(f"Error reading Firefox cookies: {e}")
    
    return cookies

def save_cookies_netscape(cookies: List[Dict], output_file: str = "config/youtube_cookies.txt"):
    """Save cookies in Netscape format for yt-dlp"""
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w') as f:
        f.write("# Netscape HTTP Cookie File\n")
        f.write("# This file is generated by extract_cookies.py\n")
        f.write("# https://curl.haxx.se/rfc/cookie_spec.html\n\n")
        
        for cookie in cookies:
            # Filter for important YouTube/Google cookies
            if any(important in cookie['name'] for important in 
                   ['SID', 'HSID', 'SSID', 'SAPISID', 'APISID', 'LOGIN_INFO', 
                    'VISITOR_INFO', 'PREF', 'YSC', 'CONSENT']):
                
                # Format: domain flag path secure expiration name value
                domain = cookie['domain']
                flag = 'TRUE' if domain.startswith('.') else 'FALSE'
                path = cookie.get('path', '/')
                secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
                expires = str(cookie.get('expires', 0))
                name = cookie['name']
                value = cookie['value']
                
                f.write(f"{domain}\t{flag}\t{path}\t{secure}\t{expires}\t{name}\t{value}\n")
    
    print(f"‚úÖ Cookies saved to {output_file}")
    return output_file

def extract_youtube_cookies():
    """Main function to extract cookies from available browsers"""
    all_cookies = []
    
    print("YouTube Cookie Extractor")
    print("=" * 50)
    
    # Try Chrome
    print("\nüîç Checking Chrome...")
    chrome_cookies = get_chrome_cookies()
    if chrome_cookies:
        print(f"Found {len(chrome_cookies)} Chrome cookies")
        all_cookies.extend(chrome_cookies)
    
    # Try Firefox
    print("\nüîç Checking Firefox...")
    firefox_cookies = get_firefox_cookies()
    if firefox_cookies:
        print(f"Found {len(firefox_cookies)} Firefox cookies")
        all_cookies.extend(firefox_cookies)
    
    if not all_cookies:
        print("\n‚ùå No cookies found!")
        print("\nPlease make sure you:")
        print("1. Are logged into YouTube in Chrome or Firefox")
        print("2. Have visited YouTube recently")
        print("3. Close the browser before running this script")
        return None
    
    # Remove duplicates
    unique_cookies = {}
    for cookie in all_cookies:
        key = f"{cookie['domain']}_{cookie['name']}"
        unique_cookies[key] = cookie
    
    print(f"\n‚úÖ Found {len(unique_cookies)} unique cookies")
    
    # Save cookies
    output_file = save_cookies_netscape(list(unique_cookies.values()))
    
    print("\nüéâ Cookie extraction complete!")
    print(f"Cookies saved to: {output_file}")
    print("\nYou can now use these cookies with the YouTube downloader")
    print("The cookies will expire in ~30 days, re-run this script to refresh")
    
    return output_file

def manual_cookie_instructions():
    """Print instructions for manual cookie extraction"""
    print("\nüìã Manual Cookie Extraction Instructions")
    print("=" * 50)
    print("\nIf automatic extraction fails, you can extract cookies manually:")
    print("\n1. Install browser extension:")
    print("   - Chrome: 'Get cookies.txt LOCALLY' extension")
    print("   - Firefox: 'cookies.txt' addon")
    print("\n2. Log into YouTube in your browser")
    print("\n3. Click the extension icon while on YouTube")
    print("\n4. Save the cookies.txt file")
    print("\n5. Move it to: config/youtube_cookies.txt")
    print("\nAlternative method using Developer Tools:")
    print("1. Open YouTube and press F12 (Developer Tools)")
    print("2. Go to Application/Storage > Cookies")
    print("3. Find these important cookies:")
    print("   - SID, HSID, SSID")
    print("   - SAPISID, APISID") 
    print("   - LOGIN_INFO")
    print("   - VISITOR_INFO1_LIVE")
    print("4. Format them in Netscape cookie format")

if __name__ == "__main__":
    try:
        result = extract_youtube_cookies()
        if not result:
            manual_cookie_instructions()
    except KeyboardInterrupt:
        print("\n\nCancelled by user")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        manual_cookie_instructions()